// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team2370.robot.commands;

import edu.wpi.first.wpilibj.Notifier;
import edu.wpi.first.wpilibj.command.Command;

import java.io.IOException;

import org.json.simple.parser.ParseException;
import org.usfirst.frc.team2370.robot.Robot;
import org.usfirst.frc.team2370.utils.SrxTrajectoryImporter;

import com.ctre.phoenix.motion.MotionProfileStatus;
import com.ctre.phoenix.motion.SetValueMotionProfile;
import com.ctre.phoenix.motion.TrajectoryPoint;
import com.ctre.phoenix.motion.TrajectoryPoint.TrajectoryDuration;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;

import org.usfirst.frc.team2370.robot.RobotMap;
//import org.usfirst.frc.team2370.models.BobTalonSRX;
import org.usfirst.frc.team2370.models.SrxMotionProfile;
import org.usfirst.frc.team2370.models.SrxTrajectory;


public class FollowTrajectory extends Command {
	
	private TalonSRX _leftLead = RobotMap.TAL_leftMaster;//Robot.drivetrain.leftLead;
	private TalonSRX _rightLead = RobotMap.TAL_rightMaster;//Robot.drivetrain.rightLead;

	private String trajectoryName = "";
	private int kMinPointsInTalon = 5;
	
	private boolean isFinished = false;

	private SrxTrajectory trajectoryToFollow = null;
	private SrxTrajectoryImporter importer = new SrxTrajectoryImporter("/home/lvuser/Autos");

	private MotionProfileStatus rightStatus = new MotionProfileStatus();
	private MotionProfileStatus leftStatus = new MotionProfileStatus();

	/**
	 * this is only either Disable, Enable, or Hold. Since we'd never want one
	 * side to be enabled while the other is disabled, we'll use the same status
	 * for both sides.
	 */
	private SetValueMotionProfile setValue = SetValueMotionProfile.Disable;

	// periodically tells the SRXs to do the thing
	private class PeriodicRunnable implements java.lang.Runnable {
		public void run() {
			_leftLead.processMotionProfileBuffer();
			_rightLead.processMotionProfileBuffer();
		}
	}

	// Runs the runnable
	private Notifier SrxNotifier = new Notifier(new PeriodicRunnable());

	// constructor
	public FollowTrajectory(String trajectoryName) {
		requires(Robot.kDriveTrain);
		this.trajectoryName = trajectoryName;
	}
	
	public FollowTrajectory(SrxTrajectory trajectoryToFollow) {
		requires(Robot.kDriveTrain);
		this.trajectoryToFollow = trajectoryToFollow;
	}
	
	public FollowTrajectory(SrxTrajectory trajectoryToFollow, TalonSRX leftLead, TalonSRX rightLead) {
		this(trajectoryToFollow);
		_leftLead = leftLead;
		_rightLead = rightLead;
	}
	
	public FollowTrajectory(String trajectoryName, TalonSRX leftLead, TalonSRX rightLead) {
		this(trajectoryName);
		_leftLead = leftLead;
		_rightLead = rightLead;
	}

	// Called just before this Command runs the first time
	protected void initialize() {

		setUpTalon(_rightLead);
		setUpTalon(_leftLead);

		setValue = SetValueMotionProfile.Disable;
		
		_leftLead.set(ControlMode.MotionProfile, setValue.value);
		_rightLead.set(ControlMode.MotionProfile, setValue.value);

		SrxNotifier.startPeriodic(.005);
		
		if(trajectoryToFollow == null) {
			
			try 
			{
				this.trajectoryToFollow = importer.importSrxTrajectory(trajectoryName);
			} 
			catch (IOException | ParseException e) {
				System.out.println("Failed to import trajectory.");
				e.printStackTrace();
				isFinished = true;
				return;
			}
		}
		
		int pidfSlot = 0;//Robot.drivetrain.HIGH_GEAR_PROFILE;
		
		fillTalonBuffer(_rightLead, this.trajectoryToFollow.rightProfile, pidfSlot);
		fillTalonBuffer(_leftLead, this.trajectoryToFollow.leftProfile, pidfSlot);

	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {

		_rightLead.getMotionProfileStatus(rightStatus);
		_leftLead.getMotionProfileStatus(leftStatus);		

		if (rightStatus.isUnderrun || leftStatus.isUnderrun)
		{
			// if either MP has underrun, stop both
			System.out.println("Motion profile has underrun!");
			setValue = SetValueMotionProfile.Disable;
		}
		else if (rightStatus.btmBufferCnt > kMinPointsInTalon && leftStatus.btmBufferCnt > kMinPointsInTalon)
		{
			// if we have enough points in the talon, go.
			setValue = SetValueMotionProfile.Enable;
		}	
		else if (rightStatus.activePointValid && rightStatus.isLast && leftStatus.activePointValid
				&& leftStatus.isLast)
		{
			// if both profiles are at their last points, hold the last point
			setValue = SetValueMotionProfile.Hold;
		}
		
		_leftLead.set(ControlMode.MotionProfile, setValue.value);
		_rightLead.set(ControlMode.MotionProfile, setValue.value);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		boolean leftComplete = leftStatus.activePointValid && leftStatus.isLast;
		boolean rightComplete = rightStatus.activePointValid && rightStatus.isLast;
		boolean trajectoryComplete = leftComplete && rightComplete;
		return trajectoryComplete || isFinished;
	}

	// Called once after isFinished returns true
	protected void end() {
		SrxNotifier.stop();
		resetTalon(_rightLead, ControlMode.PercentOutput, 0);
		resetTalon(_leftLead, ControlMode.PercentOutput, 0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		SrxNotifier.stop();
		resetTalon(_rightLead, ControlMode.PercentOutput, 0);
		resetTalon(_leftLead, ControlMode.PercentOutput, 0);
	}	

	// set up the talon for motion profile control
	public void setUpTalon(TalonSRX talon) {
		talon.clearMotionProfileTrajectories();
		talon.changeMotionControlFramePeriod(5);
	}

	// set the 	 to the desired controlMode
	// used at the end of the motion profile
	public void resetTalon(TalonSRX talon, ControlMode controlMode, double setValue) {
		talon.clearMotionProfileTrajectories();
		talon.set(ControlMode.MotionProfile, SetValueMotionProfile.Disable.value);
		talon.set(controlMode, setValue);
	}

	// Send all the profile points to the talon object
	public void fillTalonBuffer(TalonSRX talon, SrxMotionProfile prof, int pidfSlot) {
		System.out.println("filling talon buffer");
		TrajectoryPoint point = new TrajectoryPoint();

		for (int i = 0; i < prof.numPoints; ++i) {
			/* for each point, fill our structure and pass it to API */
			point.position = prof.points[i][0];
			point.velocity = prof.points[i][1];
			point.timeDur = TrajectoryDuration.Trajectory_Duration_10ms;
			point.profileSlotSelect0 = pidfSlot; 
			point.profileSlotSelect1 = pidfSlot;
			point.zeroPos = false;
			if (i == 0)
				point.zeroPos = true; /* set this to true on the first point */

			point.isLastPoint = false;
			if ((i + 1) == prof.numPoints)
				point.isLastPoint = true; /*
											 * set this to true on the last point
											 */

			talon.pushMotionProfileTrajectory(point);
		}
	}
}
